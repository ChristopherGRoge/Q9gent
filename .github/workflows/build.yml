name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds (prioritized)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: q9gent.exe
            asset_name: q9gent-windows-x86_64.exe
            use_cross: false
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: q9gent.exe
            asset_name: q9gent-windows-i686.exe
            use_cross: false
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: q9gent.exe
            asset_name: q9gent-windows-aarch64.exe
            use_cross: false
          
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: q9gent
            asset_name: q9gent-linux-x86_64
            use_cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: q9gent
            asset_name: q9gent-linux-x86_64-musl
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: q9gent
            asset_name: q9gent-linux-aarch64
            use_cross: true
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: q9gent
            asset_name: q9gent-macos-x86_64
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: q9gent
            asset_name: q9gent-macos-aarch64
            use_cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross == true
        uses: taiki-e/install-action@cross

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Prepare artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}
          chmod +x ${{ matrix.asset_name }}

      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          copy target\${{ matrix.target }}\release\${{ matrix.artifact_name }} ${{ matrix.asset_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Generate checksums
        run: |
          cd artifacts
          find . -type f -exec sh -c 'sha256sum "$1" | sed "s|./||" >> ../SHA256SUMS.txt' _ {} \;
          cd ..
          cat SHA256SUMS.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*/*
            SHA256SUMS.txt
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Verify Download Integrity
            
            After downloading, verify the SHA256 checksum:
            
            **Windows (PowerShell):**
            ```powershell
            Get-FileHash q9gent-windows-x86_64.exe -Algorithm SHA256
            # Compare output with SHA256SUMS.txt
            ```
            
            **Linux/macOS:**
            ```bash
            sha256sum -c SHA256SUMS.txt
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt -- --check
